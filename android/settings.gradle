// settings.gradle (parcheado, safe include check)

pluginManagement {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()
  def (_, reactNativeMinor, reactNativePatch) = version.split("-")[0].tokenize('.').collect { it.toInteger() }

  includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())
  if(reactNativeMinor == 74 && reactNativePatch <= 3){
    includeBuild("react-settings-plugin")
  }
}

plugins { id("com.facebook.react.settings") }

def getRNMinorVersion() {
  def version = providers.exec {
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return minor
}

if (getRNMinorVersion() >= 75) {
  extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_UNSTABLE_CORE_AUTOLINKING') == '1') {
      println('\u001B[32mUsing expo-modules-autolinking as core autolinking source\u001B[0m')
      def command = [
        'node',
        '--no-warnings',
        '--eval',
        'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
        'react-native-config',
        '--json',
        '--platform',
        'android'
      ].toList()
      ex.autolinkLibrariesFromCommand(command)
    } else {
      ex.autolinkLibrariesFromCommand()
    }
  }
}

rootProject.name = 'FITTPRO'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

if (getRNMinorVersion() < 75) {
  apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
  applyNativeModulesSettingsGradle(settings)
}

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())

// ---------- Fallback manual includes (solo si existen proyectos Gradle válidos) ----------
def nativeModuleMap = [
  ':react-native-async-storage_async-storage' : '@react-native-async-storage/async-storage',
  ':react-native-firebase_app'                : '@react-native-firebase/app',
  ':react-native-picker_picker'               : '@react-native-picker/picker',
  ':react-native-gesture-handler'             : 'react-native-gesture-handler',
  ':react-native-image-picker'                : 'react-native-image-picker',
  ':react-native-in-app-review'               : 'react-native-in-app-review',
  ':react-native-reanimated'                  : 'react-native-reanimated',
  ':react-native-safe-area-context'           : 'react-native-safe-area-context',
  ':react-native-screens'                     : 'react-native-screens',
  ':react-native-svg'                         : 'react-native-svg',
  ':react-native-vector-icons'                : 'react-native-vector-icons',
  ':react-native-version-check'               : 'react-native-version-check',
  ':react-native-video'                       : 'react-native-video',
  ':react-native-webview'                     : 'react-native-webview'
]

nativeModuleMap.each { projectName, modulePath ->
  try {
    def candidateDirs = [
      new File(rootDir, "../node_modules/${modulePath}/android"),
      new File(rootDir, "../node_modules/${modulePath}")
    ]

    def found = candidateDirs.find { it.exists() && it.isDirectory() }

    if (found) {
      // COMPROBACIÓN ADICIONAL: debe contener build.gradle o build.gradle.kts
      def hasGradleFile = new File(found, "build.gradle").exists() || new File(found, "build.gradle.kts").exists()
      if (!hasGradleFile) {
        println("Skipping include for ${modulePath} because no build.gradle found in ${found}")
        return
      }

      if (findProject(projectName) == null) {
        include projectName
        project(projectName).projectDir = found
        println("Included native module ${projectName} -> ${found}")
      } else {
        println("Native module ${projectName} was already included by autolinking")
      }
    } else {
      println("Native module not found in node_modules (skipping): ${modulePath}")
    }
  } catch (Exception e) {
    println("Warning: could not include ${projectName} -> ${modulePath} : ${e.message}")
  }
}
